name: CI - Build, Test, and Coverage Check

permissions:
  pull-requests: write
  contents: read

on:
  pull_request:
    branches:
      - master
      - development
  push:
    branches:
      - master
      - development

jobs:
  build-and-test:
    name: Build, Test and Generate Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Ombor.sln

    - name: Build solution
      run: dotnet build Ombor.sln --no-restore --configuration Release

    - name: Run tests and collect coverage
      run: dotnet test Ombor.sln --no-build --configuration Release --verbosity normal --settings coverlet.runsettings

    - name: Generate Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.5
      with:
        reports: "**/coverage.cobertura.xml"
        targetdir: "coverage-report"
        reporttypes: 'HtmlInline;Cobertura;TextSummary'

    - name: Publish Code Coverage Report
      id: coverage_summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "coverage-report/Cobertura.xml"
        badge: true
        fail_below_min: true
        minimum_coverage: 80
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: "80 80"

    - name: Add Coverage Summary to GitHub Action UI
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Prepare Decorated PR Comment with Dynamic Badge and Clear Status
      run: |
        # Create the comment file
        echo "### 🛡️ Code Coverage Report 🛡️" > decorated-coverage-comment.md
        echo "" >> decorated-coverage-comment.md

        # Extract coverage percentage
        COVERAGE=$(grep -oP '\d+(?=%)' code-coverage-results.md | head -1)

        # Decide badge color
        if [ "$COVERAGE" -ge 90 ]; then
          COLOR="brightgreen"
        elif [ "$COVERAGE" -ge 80 ]; then
          COLOR="yellow"
        else
          COLOR="red"
        fi

        # Check if any metric failed (looks for ❌ in markdown)
        if grep -q '❌' code-coverage-results.md; then
          STATUS="❌ **Code Coverage Check Failed**"
        else
          STATUS="✅ **Code Coverage Check Passed**"
        fi

        # Write Status
        echo "${STATUS}" >> decorated-coverage-comment.md
        echo "" >> decorated-coverage-comment.md

        # Write Dynamic Badge
        echo "![Code Coverage Badge](https://img.shields.io/badge/Code%20Coverage-${COVERAGE}%25-${COLOR})" >> decorated-coverage-comment.md
        echo "" >> decorated-coverage-comment.md

        # Optional: Write quick note
        if grep -q '❌' code-coverage-results.md; then
          echo "_One or more projects have coverage below threshold._" >> decorated-coverage-comment.md
          echo "" >> decorated-coverage-comment.md
        fi

        # Append the code coverage table
        cat code-coverage-results.md >> decorated-coverage-comment.md

    - name: Post Coverage Summary as PR Comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: decorated-coverage-comment.md

    - name: Upload Coverage Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/
        retention-days: 5
