name: CI - Build, Test, Analyze, and Coverage Check

permissions:
  pull-requests: write
  contents: read

on:
  pull_request:
    branches:
      - master
      - development
  push:
    branches:
      - master
      - development

jobs:
  build-and-test:
    name: Build, Test, and Generate Coverage
    runs-on: ubuntu-latest

    env:
      MINIMUM_LINE_RATE: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Ombor.sln

    - name: Build solution
      run: dotnet build Ombor.sln --no-restore --configuration Release

    - name: Run tests and collect coverage
      run: |
        dotnet test Ombor.sln \
         --no-build \
         --configuration Release \
         --verbosity normal \
         --collect:"XPlat Code Coverage" \
         --settings coverlet.runsettings

    - name: Move coverage file
      run: |
        mkdir -p coverage-report
        file=$(find . -type f -name 'coverage.cobertura.xml' | head -n 1)
        if [ -z "$file" ]; then
          echo "Coverage file not found!"
          exit 1
        fi
        cp "$file" coverage-report/coverage.opencover.xml

    - name: Generate Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.5
      with:
        reports: "coverage-report/coverage.opencover.xml"
        targetdir: "coverage-report/html"
        reporttypes: 'HtmlInline;Cobertura;TextSummary'

    - name: Publish Code Coverage Report
      id: coverage_summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "coverage-report/Cobertura.xml"
        badge: false
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: "10 80"

    - name: Add Coverage Summary to GitHub Action UI
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Prepare Decorated PR Coverage Comment
      run: |
        echo "### 🛡️ Code Coverage Report 🛡️" > decorated-coverage-comment.md
        echo "" >> decorated-coverage-comment.md

        OVERALL_COVERAGE=$(grep 'Summary' code-coverage-results.md | grep -oP '\d+(?=%)' | head -n 1)

        if [ -z "$OVERALL_COVERAGE" ]; then
          OVERALL_COVERAGE="0"
        fi

        if [ "$OVERALL_COVERAGE" -ge 90 ]; then
          OVERALL_COLOR="brightgreen"
        elif [ "$OVERALL_COVERAGE" -ge 80 ]; then
          OVERALL_COLOR="yellow"
        else
          OVERALL_COLOR="red"
        fi

        echo "![Code Coverage Badge](https://img.shields.io/badge/Code%20Coverage-${OVERALL_COVERAGE}%25-${OVERALL_COLOR})" >> decorated-coverage-comment.md
        echo "" >> decorated-coverage-comment.md

        if grep -q '❌' code-coverage-results.md; then
          echo "**One or more projects have coverage below the minimum allowed threshold.**" >> decorated-coverage-comment.md
          echo "" >> decorated-coverage-comment.md
        fi

        cat code-coverage-results.md >> decorated-coverage-comment.md

        echo "" >> decorated-coverage-comment.md
        echo "**[View full coverage report](https://silk-route-connect.github.io/ombor.api/)**" >> decorated-coverage-comment.md

    - name: Post Code Coverage Report as PR Comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: decorated-coverage-comment.md
        header: "Code Coverage Report"
        recreate: true

    - name: Upload Coverage Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-opencover
        path: coverage-report/coverage.opencover.xml
        retention-days: 5

  publish-coverage:
    name: Publish Coverage to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Deploy coverage-report/html → gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: coverage-report/html
          publish_branch: gh-pages
          user_name: github-actions
          user_email: github-actions@github.com

  sonarcloud-scan:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Java for SonarCloud
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Install SonarCloud Scanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Download Coverage Report
      uses: actions/download-artifact@v4
      with:
        name: coverage-opencover
        path: coverage-report

    - name: Begin SonarCloud Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin /k:"Silk-Route-Connect_Ombor.API" /o:"silk-route-connect" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=coverage-report/coverage.opencover.xml

    - name: Restore dependencies (SonarCloud Scan)
      run: dotnet restore Ombor.sln

    - name: Minimal Build for SonarCloud
      run: dotnet build Ombor.sln --no-restore --configuration Release

    - name: End SonarCloud Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Check SonarCloud Quality Gate Result
      id: sonarcloud_qualitygate
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const checks = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });
          const sonarCheck = checks.data.check_runs.find(c => c.name.includes('SonarCloud Quality Gate'));
          if (sonarCheck) {
            console.log(`SonarCloud Quality Gate status: ${sonarCheck.conclusion}`);
            return { status: sonarCheck.conclusion };
          }
          console.log("SonarCloud Quality Gate not found");
          return { status: 'unknown' };

    - name: Minimize Old SonarCloud Comments
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number
          });

          for (const comment of comments.data) {
            if (comment.user.login === "sonarcloud[bot]" && comment.body.includes('Quality Gate')) {
              console.log(`Minimizing SonarCloud comment: ${comment.id}`);
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: comment.body + "\n\n_Minimized to keep PR clean._"
              }).catch((err) => {
                console.log(`Failed to minimize comment ${comment.id}: ${err.message}`);
              });
            }
          }
