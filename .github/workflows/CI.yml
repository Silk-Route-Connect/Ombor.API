name: CI - Build, Test, Analyze, and Coverage Check

permissions:
  pull-requests: write
  contents: write

on:
  pull_request:
    branches: [ master, development ]
  push:
    branches: [ master, development ]

jobs:
  build-and-test:
    name: Build, Test & Generate Coverage
    runs-on: ubuntu-latest
    env:
      MINIMUM_LINE_RATE: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Ombor.sln

      - name: Build solution
        run: dotnet build Ombor.sln --no-restore --configuration Release

      - name: Run tests and collect coverage
        run: |
          dotnet test Ombor.sln \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --settings coverlet.runsettings

      - name: Gather all coverage files
        run: |
          mkdir -p coverage-report
          # Cobertura outputs
          find . -type f -name 'coverage.cobertura.xml' \
            -exec bash -c \
              'proj=$(basename "$(dirname "$(dirname "$1")")"); \
               cp "$1" coverage-report/"$proj".cobertura.xml' _ {} \;
          # OpenCover outputs
          find . -type f -name 'coverage.opencover.xml' \
            -exec bash -c \
              'proj=$(basename "$(dirname "$(dirname "$1")")"); \
               cp "$1" coverage-report/"$proj".opencover.xml' _ {} \;

      - name: Generate merged Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.5
        with:
          reports: "coverage-report/*.opencover.xml"
          targetdir: "coverage-report/html"
          reporttypes: "Html;Cobertura;TextSummary"

      - name: Upload HTML Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage-report/html

      - name: Upload Coverage XML Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage-report

      - name: Publish Code Coverage Summary
        id: coverage_summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage-report/html/Cobertura.xml
          badge: false
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 80"

      - name: Add Coverage Summary to GitHub Action UI
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Prepare Decorated PR Coverage Comment
        if: github.event_name == 'pull_request'
        run: |
          echo "### 🛡️ Code Coverage Report 🛡️" > decorated-coverage-comment.md
          echo "" >> decorated-coverage-comment.md
          cat code-coverage-results.md >> decorated-coverage-comment.md
          echo "" >> decorated-coverage-comment.md
          echo "**[View full coverage report](https://silk-route-connect.github.io/Ombor.API/)**" >> decorated-coverage-comment.md

      - name: Post Code Coverage Report as PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: decorated-coverage-comment.md
          header: "Code Coverage Report"
          recreate: true

  publish-coverage:
    name: Publish Coverage to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ needs.build-and-test.result == 'success' }}
    steps:
      - name: Download HTML Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: coverage-report/html-down

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: coverage-report/html-down
          publish_branch: github-pages
          user_name: github-actions
          user_email: github-actions@github.com

  sonarcloud-scan:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Java for SonarCloud
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install SonarCloud Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Download Coverage XML Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
          path: coverage-report

      - name: Begin SonarCloud Analysis
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            dotnet sonarscanner begin \
              /k:"Silk-Route-Connect_Ombor.API" \
              /o:"silk-route-connect" \
              /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
              /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" \
              /d:sonar.pullrequest.branch="${{ github.event.pull_request.head.ref }}" \
              /d:sonar.pullrequest.base="${{ github.event.pull_request.base.ref }}"
          else
            dotnet sonarscanner begin \
              /k:"Silk-Route-Connect_Ombor.API" \
              /o:"silk-route-connect" \
              /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          fi


      - name: Restore dependencies
        run: dotnet restore Ombor.sln

      - name: Build for SonarCloud
        run: dotnet build Ombor.sln --no-restore --configuration Release

      - name: End SonarCloud Analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Check SonarCloud Quality Gate Result
        if: github.event_name == 'pull_request'
        id: sonarcloud_qualitygate
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            const gate = checks.data.check_runs.find(c => c.name.includes('SonarCloud Quality Gate'));
            return { status: gate ? gate.conclusion : 'unknown'; }

      - name: Minimize Old SonarCloud Comments
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            for (const c of comments.data) {
              if (c.user.login === "sonarcloud[bot]" && c.body.includes('Quality Gate')) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: c.id,
                  body: c.body + "\n\n_Minimized to keep PR clean._"
                });
              }
            }
